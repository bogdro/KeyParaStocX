<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Process" script:language="StarBasic" script:moduleType="normal">REM  *****  BASIC  *****
Option Explicit

&apos; KeyParaStocX - main module
&apos;
&apos; Copyright (C) 2011-2025 Bogdan &apos;bogdro&apos; Drozdowski, bogdro (at) users . sourceforge . net
&apos;
&apos; This file is part of the OpenOffice / LibreOffice extension KeyParaStocX
&apos;  (Keyword-based Paragraph Styling and Table of Contents eXtension).
&apos;
&apos; Project homepage: https://keyparastocx.sourceforge.io/
&apos;
&apos; This program is free software; you can redistribute it and/or
&apos;  modify it under the terms of the GNU General Public License
&apos;  as published by the Free Software Foundation; either version 3
&apos;  of the License, or (at your option) any later version.
&apos;
&apos; This program is distributed in the hope that it will be useful,
&apos;  but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
&apos;  GNU General Public License for more details.
&apos;
&apos; You should have received a copy of the GNU General Public License
&apos;  along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
&apos;

Sub Main

	Dim Svc As Object

	Svc = CreateUnoService(&quot;vnd.bogdandrozdowski.keyparastocx.KeyParaStocXConfig&quot;)
	&apos; first, change the words, then make new paragraphs
	ChangeWordParaStyle(Svc.getByName(&quot;head1/key&quot;), Svc.getByName(&quot;head1/style&quot;))
	ChangeWordParaStyle(Svc.getByName(&quot;head2/key&quot;), Svc.getByName(&quot;head2/style&quot;))
	ChangeWordParaStyle(Svc.getByName(&quot;head3/key&quot;), Svc.getByName(&quot;head3/style&quot;))
	ChangeWordParaStyle(Svc.getByName(&quot;head4/key&quot;), Svc.getByName(&quot;head4/style&quot;))
	ChangeWordParaStyle(Svc.getByName(&quot;head5/key&quot;), Svc.getByName(&quot;head5/style&quot;))
	ChangeWordParaStyle(Svc.getByName(&quot;head6/key&quot;), Svc.getByName(&quot;head6/style&quot;))
	ChangeLastLevel(Svc.getByName(&quot;head7/key&quot;), Svc.getByName(&quot;head7/key_alt&quot;), Svc.getByName(&quot;head7/style&quot;))
	AddTableOfContents

	msgbox &quot;OK!&quot;

End Sub

Sub ChangeWordParaStyle(WordToFind As String, NewStyle As String)

	Dim Doc As Object
	Dim ReplaceDesc As Object
	Dim Find As Object
	Dim I As Integer
	Dim F As Object

	If WordToFind = &quot;&quot; Or NewStyle = &quot;&quot; Then
		Exit Sub
	End If

	Doc = ThisComponent

	ReplaceDesc = Doc.createReplaceDescriptor
	ReplaceDesc.SearchRegularExpression = True
	ReplaceDesc.SearchCaseSensitive = True
	ReplaceDesc.SearchAll = True
	&apos; &quot;\&gt;&quot; = the end of a word
	&apos; the tab is also needed, despite the \t
	ReplaceDesc.SearchString = &quot;^[ \t\s	]*&quot; &amp; WordToFind &amp; &quot;\&gt;&quot;

	&apos; &quot;replaceAll&quot; doesn&apos;t work - cannot change the paragraph style
	Find = Doc.FindAll(ReplaceDesc)
	For I = 0 To Find.Count - 1

		F = Find.getByIndex(I)
		F.ParaStyleName = NewStyle

	Next

End Sub

Sub ChangeLastLevel(WordToFind As String, AlternativeWordToFind As String, NewStyle As String)

	Dim Find As Object

	If WordToFind = &quot;&quot; Or NewStyle = &quot;&quot; Then
		Exit Sub
	End If

	Find = ChangeLastLevelSingleKey(&quot;^[ \t\s	]*&quot; &amp; WordToFind &amp; &quot;[ \t\s	]+[0-9]+[a-zA-Z]*\.?[ \t\s	]+(\[([^\]])+\])&quot;, NewStyle)

	If Find.Count = 0 Then

		If AlternativeWordToFind = &quot;&quot; Then
			Exit Sub
		End If

		Find = ChangeLastLevelSingleKey(&quot;^[ \t\s	]*&quot; &amp; AlternativeWordToFind &amp; &quot;[ \t\s	]*[0-9]+[a-zA-Z]*\.?([ \t\s	]+(\[([^\]])+\]))?&quot;, NewStyle)

	End If

End Sub

Function ChangeLastLevelSingleKey(SearchString As String, NewStyle As String)

	Dim Doc As Object
	Dim ReplaceDesc As Object
	Dim Find As Object
	Dim I As Integer
	Dim F As Object
	Dim Cursor As Object

	If SearchString = &quot;&quot; Or NewStyle = &quot;&quot; Then
		Exit Function
	End If

	Doc = ThisComponent

	ReplaceDesc = Doc.createReplaceDescriptor
	ReplaceDesc.searchRegularExpression = True
	ReplaceDesc.searchCaseSensitive = True
	ReplaceDesc.SearchAll = True
	ReplaceDesc.searchString = SearchString

	&apos; &quot;replaceAll&quot; doesn&apos;t work - cannot change the paragraph style
	Find = Doc.FindAll(ReplaceDesc)
	Cursor = Doc.Text.createTextCursor
	For I = 0 To Find.Count - 1

		F = Find.getByIndex(I)
		&apos; If the word is in a table, it generates problems,
		&apos; but we don&apos;t need to process it anyway, so we skip.
		If IsEmpty(F.Cell) Then
			Cursor.gotoRange(F.end, False)
			Doc.Text.insertControlCharacter (Cursor, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False)
			F.ParaStyleName = NewStyle
		End If

	Next

	ChangeLastLevelSingleKey = Find

End Function

Sub AddTableOfContents

	Dim Doc As Object
	Dim DocIndices As Object
	Dim HasIndex As Boolean
	Dim DocIndex As Object
	Dim I As Integer
	Dim Cursor As Object

	Doc = ThisComponent
	Cursor = Doc.Text.createTextCursor

	DocIndices = Doc.getDocumentIndexes ()
	HasIndex = False

	&apos; check if a Table of Contents already exists
	For I = 0 To DocIndices.getCount() - 1

		DocIndex = DocIndices.getByIndex(I)
		If DocIndex.supportsService (&quot;com.sun.star.text.ContentIndex&quot;) Then

			HasIndex = True
			Exit For

		End If

	Next

	If Not HasIndex Then

		&apos; no Table of Contents - add a new one
		DocIndex = Doc.createInstance (&quot;com.sun.star.text.ContentIndex&quot;)
		Cursor.gotoStart (False)
		DocIndex.createFromOutline = True
		DocIndex.IsProtected = False
		Doc.Text.insertTextContent (Cursor, DocIndex, False)
		&apos; cannot insert a page break, so we set that the Cursor inserts it
		&apos; and we input anything in the Cursor (a new paragraph is neutral)
		Cursor.BreakType = com.sun.star.style.BreakType.PAGE_AFTER
		Doc.Text.insertControlCharacter (Cursor, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False)

		&apos; number the pages after the ToC from 1
		Cursor.PageDescName = Cursor.PageStyleName
		Cursor.gotoStartOfParagraph (False)
		Cursor.gotoEndOfParagraph (True)
		Cursor.PageNumberOffset = 1

	End If

	&apos; need to do this twice, otherwise the page numbers are wrong
	DocIndex.update ()
	DocIndex.update ()

End Sub


</script:module>
