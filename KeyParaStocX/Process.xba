<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Process" script:language="StarBasic" script:moduleType="normal">REM  *****  BASIC  *****
Option Explicit

&apos; KeyParaStocX - main module
&apos;
&apos; Copyright (C) 2011-2023 Bogdan &apos;bogdro&apos; Drozdowski, bogdro (at) users . sourceforge . net
&apos;
&apos; This file is part of the OpenOffice / LibreOffice extension KeyParaStocX
&apos;  (Keyword-based Paragraph Styling and Table of Contents eXtension).
&apos;
&apos; This program is free software; you can redistribute it and/or
&apos;  modify it under the terms of the GNU General Public License
&apos;  as published by the Free Software Foundation; either version 3
&apos;  of the License, or (at your option) any later version.
&apos;
&apos; This program is distributed in the hope that it will be useful,
&apos;  but WITHOUT ANY WARRANTY; without even the implied warranty of
&apos;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
&apos;  GNU General Public License for more details.
&apos;
&apos; You should have received a copy of the GNU General Public License
&apos;  along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
&apos;

Sub Main

	Dim svc as object
	Dim a as string
	
	svc = CreateUnoService(&quot;vnd.bogdandrozdowski.keyparastocx.KeyParaStocXConfig&quot;)
	&apos; first, change the words, then make new paragraphs
	ChangeWordParaStyle (svc.getByName(&quot;head1/key&quot;), svc.getByName(&quot;head1/style&quot;))
	ChangeWordParaStyle (svc.getByName(&quot;head2/key&quot;), svc.getByName(&quot;head2/style&quot;))
	ChangeWordParaStyle (svc.getByName(&quot;head3/key&quot;), svc.getByName(&quot;head3/style&quot;))
	ChangeWordParaStyle (svc.getByName(&quot;head4/key&quot;), svc.getByName(&quot;head4/style&quot;))
	ChangeWordParaStyle (svc.getByName(&quot;head5/key&quot;), svc.getByName(&quot;head5/style&quot;))
	ChangeWordParaStyle (svc.getByName(&quot;head6/key&quot;), svc.getByName(&quot;head6/style&quot;))
	ChangeLastLevel (svc.getByName(&quot;head7/key&quot;), svc.getByName(&quot;head7/key_alt&quot;), svc.getByName(&quot;head7/style&quot;))
	AddTableOfContents

	msgbox &quot;Done!&quot;

End Sub

Sub ChangeWordParaStyle (theWord as string, newStyle as string)

	Dim Doc as object
	Dim replaceDesc as object
	Dim find as object
	Dim i as Integer
	Dim f as object

	Doc = ThisComponent

	replaceDesc = Doc.createReplaceDescriptor
	replaceDesc.searchRegularExpression = True
	replaceDesc.searchCaseSensitive = True
	replaceDesc.SearchAll = True
	&apos; &quot;\&gt;&quot; = the end of a word
	&apos; the tab is also needed, despite the \t
	replaceDesc.searchString = &quot;^[ \t\s	]*&quot; &amp; theWord &amp; &quot;\&gt;&quot;

	&apos; &quot;replaceAll&quot; doesn&apos;t work - cannot change the paragraph style
	find = doc.FindAll (replaceDesc)
	For i = 0 to find.Count - 1

		f = find.getByIndex (i)
		f.ParaStyleName = newStyle

	Next

End Sub

Sub ChangeLastLevel (key as string, alt_key as string, newStyle as string)

	Dim Doc as object
	Dim replaceDesc as object
	Dim find as object
	Dim i as Integer
	Dim f as object
	Dim Cursor as object

	Doc = ThisComponent

	replaceDesc = Doc.createReplaceDescriptor
	replaceDesc.searchRegularExpression = True
	replaceDesc.searchCaseSensitive = True
	replaceDesc.SearchAll = True
	replaceDesc.searchString = &quot;^[ \t\s	]*&quot; &amp; key &amp; &quot;[ \t\s	]+[0-9]+[a-zA-Z]*\.?[ \t\s	]+(\[([^\]])+\])&quot;

	&apos; &quot;replaceAll&quot; doesn&apos;t work - cannot change the paragraph style
	find = doc.FindAll (replaceDesc)
	Cursor = Doc.Text.createTextCursor
	For i = 0 to find.Count - 1

		f = find.getByIndex (i)
		&apos; If the word is in a table, it generates problems,
		&apos; but we don&apos;t need to process it anyway, so we skip.
		If IsEmpty (f.Cell) Then
			Cursor.gotoRange (f.end, False)
			Doc.Text.insertControlCharacter (Cursor, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False)
			f.ParaStyleName = newStyle
		End If

	Next

	If find.Count = 0 Then

		&apos; primary key not found - change the secondary instead
		replaceDesc = Doc.createReplaceDescriptor
		replaceDesc.searchRegularExpression = True
		replaceDesc.searchCaseSensitive = True
		replaceDesc.SearchAll = True
		replaceDesc.searchString = &quot;^[ \t\s	]*&quot; &amp; alt_key &amp; &quot;[ \t\s	]*[0-9]+[a-zA-Z]*\.?([ \t\s	]+(\[([^\]])+\]))?&quot;

		&apos; &quot;replaceAll&quot; doesn&apos;t work - cannot change the paragraph style
		find = doc.FindAll (replaceDesc)
&apos;		Cursor = Doc.Text.createTextCursor
		For i = 0 to find.Count - 1

			f = find.getByIndex (i)
			&apos; If the word is in a table, it generates problems,
			&apos; but we don&apos;t need to process it anyway, so we skip.
			If IsEmpty (f.Cell) Then
				Cursor.gotoRange (f.end, False)
				Doc.Text.insertControlCharacter (Cursor, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False)
				f.ParaStyleName = newStyle
			End If

		Next

	End If

End Sub

Sub AddTableOfContents

	Dim Doc as object
	Dim DocIndices as object
	Dim hasIndex as Boolean
	Dim DocIndex as object
	Dim i as Integer
	Dim Cursor as object

	Doc = ThisComponent
	Cursor = Doc.Text.createTextCursor

	DocIndices = Doc.getDocumentIndexes ()
	hasIndex = False

	&apos; check if a Table of Contents already exists
	For i = 0 to DocIndices.getCount () - 1

		DocIndex = DocIndices.getByIndex (i)
		If DocIndex.supportsService (&quot;com.sun.star.text.ContentIndex&quot;) Then

			hasIndex = True
			Exit For

		End If

	Next

	If Not hasIndex Then

		&apos; no Table of Contents - add a new one
		DocIndex = Doc.createInstance (&quot;com.sun.star.text.ContentIndex&quot;)
		Cursor.gotoStart (False)
		DocIndex.createFromOutline = True
		DocIndex.IsProtected = False
		Doc.Text.insertTextContent (Cursor, DocIndex, False)
		&apos; cannot insert a page break, so we set that the Cursor inserts it
		&apos; and we input anything in the Cursor (a new paragraph is neutral)
		Cursor.BreakType = com.sun.star.style.BreakType.PAGE_AFTER
		Doc.Text.insertControlCharacter (Cursor, com.sun.star.text.ControlCharacter.PARAGRAPH_BREAK, False)

		&apos; number the pages after the ToC from 1
		Cursor.PageDescName = Cursor.PageStyleName
		Cursor.gotoStartOfParagraph (False)
		Cursor.gotoEndOfParagraph (True)
		Cursor.PageNumberOffset = 1

	End If

	&apos; need to do this twice, otherwise the page numbers are wrong
	DocIndex.update ()
	DocIndex.update ()

End Sub


</script:module>
